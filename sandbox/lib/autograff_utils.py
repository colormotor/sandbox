# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_autograff_utils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_autograff_utils')
    _autograff_utils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_autograff_utils', [dirname(__file__)])
        except ImportError:
            import _autograff_utils
            return _autograff_utils
        try:
            _mod = imp.load_module('_autograff_utils', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _autograff_utils = swig_import_helper()
    del swig_import_helper
else:
    import _autograff_utils
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _autograff_utils.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _autograff_utils.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _autograff_utils.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _autograff_utils.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _autograff_utils.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _autograff_utils.SwigPyIterator_equal(self, x)

    def copy(self):
        return _autograff_utils.SwigPyIterator_copy(self)

    def next(self):
        return _autograff_utils.SwigPyIterator_next(self)

    def __next__(self):
        return _autograff_utils.SwigPyIterator___next__(self)

    def previous(self):
        return _autograff_utils.SwigPyIterator_previous(self)

    def advance(self, n):
        return _autograff_utils.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _autograff_utils.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _autograff_utils.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _autograff_utils.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _autograff_utils.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _autograff_utils.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _autograff_utils.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _autograff_utils.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import cm
class MPC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MPC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MPC, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _autograff_utils.new_MPC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _autograff_utils.delete_MPC
    __del__ = lambda self: None

    def makeRandomGaussians(self, V, covscale, semiTied=False, theta=0., minRnd=0.2):
        return _autograff_utils.MPC_makeRandomGaussians(self, V, covscale, semiTied, theta, minRnd)

    def init(self, n):
        return _autograff_utils.MPC_init(self, n)

    def initIntegratorChain(self):
        return _autograff_utils.MPC_initIntegratorChain(self)

    def SHM_r(self, d, duration):
        return _autograff_utils.MPC_SHM_r(self, d, duration)

    def computeIterative(self):
        return _autograff_utils.MPC_computeIterative(self)

    def computeBatch(self):
        return _autograff_utils.MPC_computeBatch(self)

    def drawGaussians(self, *args):
        return _autograff_utils.MPC_drawGaussians(self, *args)

    def stochasticSample(self, numSamples, numEigs, convFactor, sigma):
        return _autograff_utils.MPC_stochasticSample(self, numSamples, numEigs, convFactor, sigma)

    def getNumStochasticSamples(self):
        return _autograff_utils.MPC_getNumStochasticSamples(self)

    def getStochasticSample(self, i):
        return _autograff_utils.MPC_getStochasticSample(self, i)
    __swig_setmethods__["A"] = _autograff_utils.MPC_A_set
    __swig_getmethods__["A"] = _autograff_utils.MPC_A_get
    if _newclass:
        A = _swig_property(_autograff_utils.MPC_A_get, _autograff_utils.MPC_A_set)
    __swig_setmethods__["B"] = _autograff_utils.MPC_B_set
    __swig_getmethods__["B"] = _autograff_utils.MPC_B_get
    if _newclass:
        B = _swig_property(_autograff_utils.MPC_B_get, _autograff_utils.MPC_B_set)
    __swig_setmethods__["MuQ"] = _autograff_utils.MPC_MuQ_set
    __swig_getmethods__["MuQ"] = _autograff_utils.MPC_MuQ_get
    if _newclass:
        MuQ = _swig_property(_autograff_utils.MPC_MuQ_get, _autograff_utils.MPC_MuQ_set)
    __swig_setmethods__["Q"] = _autograff_utils.MPC_Q_set
    __swig_getmethods__["Q"] = _autograff_utils.MPC_Q_get
    if _newclass:
        Q = _swig_property(_autograff_utils.MPC_Q_get, _autograff_utils.MPC_Q_set)
    __swig_setmethods__["x0"] = _autograff_utils.MPC_x0_set
    __swig_getmethods__["x0"] = _autograff_utils.MPC_x0_get
    if _newclass:
        x0 = _swig_property(_autograff_utils.MPC_x0_get, _autograff_utils.MPC_x0_set)
    __swig_setmethods__["Mu"] = _autograff_utils.MPC_Mu_set
    __swig_getmethods__["Mu"] = _autograff_utils.MPC_Mu_get
    if _newclass:
        Mu = _swig_property(_autograff_utils.MPC_Mu_get, _autograff_utils.MPC_Mu_set)
    __swig_setmethods__["Sigma"] = _autograff_utils.MPC_Sigma_set
    __swig_getmethods__["Sigma"] = _autograff_utils.MPC_Sigma_get
    if _newclass:
        Sigma = _swig_property(_autograff_utils.MPC_Sigma_get, _autograff_utils.MPC_Sigma_set)
    __swig_setmethods__["order"] = _autograff_utils.MPC_order_set
    __swig_getmethods__["order"] = _autograff_utils.MPC_order_get
    if _newclass:
        order = _swig_property(_autograff_utils.MPC_order_get, _autograff_utils.MPC_order_set)
    __swig_setmethods__["dim"] = _autograff_utils.MPC_dim_set
    __swig_getmethods__["dim"] = _autograff_utils.MPC_dim_get
    if _newclass:
        dim = _swig_property(_autograff_utils.MPC_dim_get, _autograff_utils.MPC_dim_set)
    __swig_setmethods__["dt"] = _autograff_utils.MPC_dt_set
    __swig_getmethods__["dt"] = _autograff_utils.MPC_dt_get
    if _newclass:
        dt = _swig_property(_autograff_utils.MPC_dt_get, _autograff_utils.MPC_dt_set)
    __swig_setmethods__["r"] = _autograff_utils.MPC_r_set
    __swig_getmethods__["r"] = _autograff_utils.MPC_r_get
    if _newclass:
        r = _swig_property(_autograff_utils.MPC_r_get, _autograff_utils.MPC_r_set)
    __swig_setmethods__["globScale"] = _autograff_utils.MPC_globScale_set
    __swig_getmethods__["globScale"] = _autograff_utils.MPC_globScale_get
    if _newclass:
        globScale = _swig_property(_autograff_utils.MPC_globScale_get, _autograff_utils.MPC_globScale_set)
    __swig_setmethods__["endWeight"] = _autograff_utils.MPC_endWeight_set
    __swig_getmethods__["endWeight"] = _autograff_utils.MPC_endWeight_get
    if _newclass:
        endWeight = _swig_property(_autograff_utils.MPC_endWeight_get, _autograff_utils.MPC_endWeight_set)
    __swig_setmethods__["startWeight"] = _autograff_utils.MPC_startWeight_set
    __swig_getmethods__["startWeight"] = _autograff_utils.MPC_startWeight_get
    if _newclass:
        startWeight = _swig_property(_autograff_utils.MPC_startWeight_get, _autograff_utils.MPC_startWeight_set)
    __swig_setmethods__["viaPoints"] = _autograff_utils.MPC_viaPoints_set
    __swig_getmethods__["viaPoints"] = _autograff_utils.MPC_viaPoints_get
    if _newclass:
        viaPoints = _swig_property(_autograff_utils.MPC_viaPoints_get, _autograff_utils.MPC_viaPoints_set)
    __swig_setmethods__["zoh"] = _autograff_utils.MPC_zoh_set
    __swig_getmethods__["zoh"] = _autograff_utils.MPC_zoh_get
    if _newclass:
        zoh = _swig_property(_autograff_utils.MPC_zoh_get, _autograff_utils.MPC_zoh_set)
    __swig_setmethods__["computeCovariance"] = _autograff_utils.MPC_computeCovariance_set
    __swig_getmethods__["computeCovariance"] = _autograff_utils.MPC_computeCovariance_get
    if _newclass:
        computeCovariance = _swig_property(_autograff_utils.MPC_computeCovariance_get, _autograff_utils.MPC_computeCovariance_set)
    __swig_setmethods__["mse"] = _autograff_utils.MPC_mse_set
    __swig_getmethods__["mse"] = _autograff_utils.MPC_mse_get
    if _newclass:
        mse = _swig_property(_autograff_utils.MPC_mse_get, _autograff_utils.MPC_mse_set)
    __swig_setmethods__["Cov"] = _autograff_utils.MPC_Cov_set
    __swig_getmethods__["Cov"] = _autograff_utils.MPC_Cov_get
    if _newclass:
        Cov = _swig_property(_autograff_utils.MPC_Cov_get, _autograff_utils.MPC_Cov_set)
    __swig_setmethods__["P"] = _autograff_utils.MPC_P_set
    __swig_getmethods__["P"] = _autograff_utils.MPC_P_get
    if _newclass:
        P = _swig_property(_autograff_utils.MPC_P_get, _autograff_utils.MPC_P_set)
    __swig_setmethods__["stochasticSamples"] = _autograff_utils.MPC_stochasticSamples_set
    __swig_getmethods__["stochasticSamples"] = _autograff_utils.MPC_stochasticSamples_get
    if _newclass:
        stochasticSamples = _swig_property(_autograff_utils.MPC_stochasticSamples_get, _autograff_utils.MPC_stochasticSamples_set)
MPC_swigregister = _autograff_utils.MPC_swigregister
MPC_swigregister(MPC)


def slm_trajectory(Vp_, alpha, delta_t, Theta, d, dt, w=170.0, c=1.0, b=0.1):
    return _autograff_utils.slm_trajectory(Vp_, alpha, delta_t, Theta, d, dt, w, c, b)
slm_trajectory = _autograff_utils.slm_trajectory

def brushSize(v, minv, maxv, spread=3.0):
    return _autograff_utils.brushSize(v, minv, maxv, spread)
brushSize = _autograff_utils.brushSize

def drawBrush(img, ctr_, animIndex, dt, brushSz, brushMinv, brushMaxv, brushSpread, dist=1.):
    return _autograff_utils.drawBrush(img, ctr_, animIndex, dt, brushSz, brushMinv, brushMaxv, brushSpread, dist)
drawBrush = _autograff_utils.drawBrush

def drawBrushExp(img, ctr_, animIndex, dt, rMin, rMax, dist=1., lowpass=1., baseSpeed=0.):
    return _autograff_utils.drawBrushExp(img, ctr_, animIndex, dt, rMin, rMax, dist, lowpass, baseSpeed)
drawBrushExp = _autograff_utils.drawBrushExp

def drawBrushExpSpeed(img, ctr_, S, animIndex, rMin, rMax, dist=1., lowpass=1., baseSpeed=0.):
    return _autograff_utils.drawBrushExpSpeed(img, ctr_, S, animIndex, rMin, rMax, dist, lowpass, baseSpeed)
drawBrushExpSpeed = _autograff_utils.drawBrushExpSpeed

def drawBrushUniform(img, ctr_, animIndex, size, dist=1.):
    return _autograff_utils.drawBrushUniform(img, ctr_, animIndex, size, dist)
drawBrushUniform = _autograff_utils.drawBrushUniform

def drawGaussian2d(*args):
    return _autograff_utils.drawGaussian2d(*args)
drawGaussian2d = _autograff_utils.drawGaussian2d

def drawGaussians2d(*args):
    return _autograff_utils.drawGaussians2d(*args)
drawGaussians2d = _autograff_utils.drawGaussians2d
class Rasterizer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rasterizer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rasterizer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _autograff_utils.new_Rasterizer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _autograff_utils.delete_Rasterizer
    __del__ = lambda self: None

    def release(self):
        return _autograff_utils.Rasterizer_release(self)

    def init(self, w, h):
        return _autograff_utils.Rasterizer_init(self, w, h)

    def clear(self, r, g, b, a, depth=True):
        return _autograff_utils.Rasterizer_clear(self, r, g, b, a, depth)

    def clearDepth(self, val=1.0):
        return _autograff_utils.Rasterizer_clearDepth(self, val)

    def setModelViewMatrix(self, m):
        return _autograff_utils.Rasterizer_setModelViewMatrix(self, m)

    def setProjectionMatrix(self, m):
        return _autograff_utils.Rasterizer_setProjectionMatrix(self, m)

    def setVertices(self, V):
        return _autograff_utils.Rasterizer_setVertices(self, V)

    def setNormals(self, N):
        return _autograff_utils.Rasterizer_setNormals(self, N)

    def setColors(self, C):
        return _autograff_utils.Rasterizer_setColors(self, C)

    def setIndices(self, I):
        return _autograff_utils.Rasterizer_setIndices(self, I)

    def setFillMode(self, fillMode):
        return _autograff_utils.Rasterizer_setFillMode(self, fillMode)

    def setCullCCW(self, flag):
        return _autograff_utils.Rasterizer_setCullCCW(self, flag)

    def setCullCW(self, flag):
        return _autograff_utils.Rasterizer_setCullCW(self, flag)

    def enableDepthBuffer(self, flag):
        return _autograff_utils.Rasterizer_enableDepthBuffer(self, flag)

    def color(self, clr):
        return _autograff_utils.Rasterizer_color(self, clr)

    def rasterize(self):
        return _autograff_utils.Rasterizer_rasterize(self)

    def fill(self, *args):
        return _autograff_utils.Rasterizer_fill(self, *args)

    def draw(self, *args):
        return _autograff_utils.Rasterizer_draw(self, *args)

    def getImage(self):
        return _autograff_utils.Rasterizer_getImage(self)
    DEPTH_MAX = _autograff_utils.Rasterizer_DEPTH_MAX
    DEPTH_MAX_HALF = _autograff_utils.Rasterizer_DEPTH_MAX_HALF
    MAX_RASTERIZED_PTS = _autograff_utils.Rasterizer_MAX_RASTERIZED_PTS

    def makeVertex(self, *args):
        return _autograff_utils.Rasterizer_makeVertex(self, *args)

    def getRasterizedSegmentPoints(self, *args):
        return _autograff_utils.Rasterizer_getRasterizedSegmentPoints(self, *args)

    def rasterizeSegment(self, va, vb, ztest=True):
        return _autograff_utils.Rasterizer_rasterizeSegment(self, va, vb, ztest)

    def getRasterizedContourPoints(self, ctr, ztest=True):
        return _autograff_utils.Rasterizer_getRasterizedContourPoints(self, ctr, ztest)

    def rasterizeContour(self, ctr, ztest=True):
        return _autograff_utils.Rasterizer_rasterizeContour(self, ctr, ztest)
Rasterizer_swigregister = _autograff_utils.Rasterizer_swigregister
Rasterizer_swigregister(Rasterizer)


def trace(*args):
    return _autograff_utils.trace(*args)
trace = _autograff_utils.trace
# This file is compatible with both classic and new-style classes.


